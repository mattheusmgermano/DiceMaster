// <auto-generated />
using System;
using CharacterManagement.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterManagement.WebAPI.Migrations
{
    [DbContext(typeof(DmContext))]
    [Migration("20230521143558_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<double>("ExperiencePoints")
                        .HasColumnType("float");

                    b.Property<int>("HealthPoints")
                        .HasColumnType("int");

                    b.Property<int>("Inteligence")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MagicPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatPoints")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.Base.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Items", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Skill.Base.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcessoryItemId")
                        .HasColumnType("int");

                    b.Property<int?>("AttackItemId")
                        .HasColumnType("int");

                    b.Property<int>("Cooldown")
                        .HasColumnType("int");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentItemId")
                        .HasColumnType("int");

                    b.Property<int>("HealingPoints")
                        .HasColumnType("int");

                    b.Property<int>("ManaCost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int?>("RuneItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ToolItemId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcessoryItemId");

                    b.HasIndex("AttackItemId");

                    b.HasIndex("EquipmentItemId");

                    b.HasIndex("RuneItemId");

                    b.HasIndex("ToolItemId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Skill.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Charisma")
                        .HasColumnType("int");

                    b.Property<int>("Constitution")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int>("HealthPoints")
                        .HasColumnType("int");

                    b.Property<int>("Inteligence")
                        .HasColumnType("int");

                    b.Property<int>("MagicPoints")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("Wisdom")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.AcessoryItem", b =>
                {
                    b.HasBaseType("CharacterManagement.WebAPI.Models.Item.Base.Item");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.ToTable("AcessoryItems", (string)null);
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.AttackItem", b =>
                {
                    b.HasBaseType("CharacterManagement.WebAPI.Models.Item.Base.Item");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AttackItems", (string)null);
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.EquipmentItem", b =>
                {
                    b.HasBaseType("CharacterManagement.WebAPI.Models.Item.Base.Item");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<string>("DefenseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("EquipmentItems", (string)null);
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.MiscellaneousItem", b =>
                {
                    b.HasBaseType("CharacterManagement.WebAPI.Models.Item.Base.Item");

                    b.ToTable("MiscellaneousItems", (string)null);
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.RuneItem", b =>
                {
                    b.HasBaseType("CharacterManagement.WebAPI.Models.Item.Base.Item");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.ToTable("RuneItems", (string)null);
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.ToolItem", b =>
                {
                    b.HasBaseType("CharacterManagement.WebAPI.Models.Item.Base.Item");

                    b.ToTable("ToolItems", (string)null);
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.Base.Item", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Character", null)
                        .WithMany("Inventory")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Skill.Base.Skill", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Item.ItemTypes.AcessoryItem", null)
                        .WithMany("Skills")
                        .HasForeignKey("AcessoryItemId");

                    b.HasOne("CharacterManagement.WebAPI.Models.Item.ItemTypes.AttackItem", null)
                        .WithMany("Skills")
                        .HasForeignKey("AttackItemId");

                    b.HasOne("CharacterManagement.WebAPI.Models.Item.ItemTypes.EquipmentItem", null)
                        .WithMany("Skills")
                        .HasForeignKey("EquipmentItemId");

                    b.HasOne("CharacterManagement.WebAPI.Models.Item.ItemTypes.RuneItem", null)
                        .WithMany("Skills")
                        .HasForeignKey("RuneItemId");

                    b.HasOne("CharacterManagement.WebAPI.Models.Item.ItemTypes.ToolItem", null)
                        .WithMany("Skills")
                        .HasForeignKey("ToolItemId");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Skill.Effect", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Skill.Base.Skill", null)
                        .WithMany("Effects")
                        .HasForeignKey("SkillId");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.AcessoryItem", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Item.Base.Item", null)
                        .WithOne()
                        .HasForeignKey("CharacterManagement.WebAPI.Models.Item.ItemTypes.AcessoryItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.AttackItem", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Item.Base.Item", null)
                        .WithOne()
                        .HasForeignKey("CharacterManagement.WebAPI.Models.Item.ItemTypes.AttackItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.EquipmentItem", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Item.Base.Item", null)
                        .WithOne()
                        .HasForeignKey("CharacterManagement.WebAPI.Models.Item.ItemTypes.EquipmentItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.MiscellaneousItem", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Item.Base.Item", null)
                        .WithOne()
                        .HasForeignKey("CharacterManagement.WebAPI.Models.Item.ItemTypes.MiscellaneousItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.RuneItem", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Item.Base.Item", null)
                        .WithOne()
                        .HasForeignKey("CharacterManagement.WebAPI.Models.Item.ItemTypes.RuneItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.ToolItem", b =>
                {
                    b.HasOne("CharacterManagement.WebAPI.Models.Item.Base.Item", null)
                        .WithOne()
                        .HasForeignKey("CharacterManagement.WebAPI.Models.Item.ItemTypes.ToolItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Character", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Skill.Base.Skill", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.AcessoryItem", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.AttackItem", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.EquipmentItem", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.RuneItem", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("CharacterManagement.WebAPI.Models.Item.ItemTypes.ToolItem", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
